getwd()
install.packages("rticles")
library(rticles)
?rticles
library(rticles)
shiny::runApp('workshop')
head(mpg)
mpgData
pmg
mpg
datasets::cars
head(cars)
head(car)
mtcars
head(mtcars)
?kable
120
7*4
120-28
120-28-28
120-28-28-28
120-28-28-28-28
120-28-28-28-28
getwed()
getwd()
getwd("../")
#install.packages("shiny")
library(shiny)
knitr::include_graphics("../figures/shiny.png")
getwd()
?setAccountInfo
shinyApp(ui = ui, server = server,options=list(height = 550))

ui <- fluidPage(
# App title ----
titlePanel("Miles Per Gallon"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("mpgPlot")
)
)
)
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
plot(as.formula(formulaText()),
data = mtcars,
col = "#75AADB", pch = 19)
})
}
server
output$mpgPlot <- renderPlot({
plot(as.formula(formulaText()),
data = mtcars,
col = "#75AADB", pch = 19)
})
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
plot(as.formula(formulaText()),
data = mtcars,
col = "#75AADB", pch = 19)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server,options=list(height = 550))
800+800+500
?pdflatex
library(pdflatex)
library(pdflatex
)
??pdflatex
rmarkdown::pdf_document
?knitr::kable
shiny::runApp('~/Desktop/test')
library(shiny)
?fluidPage
?plotOutput
?shinyApp
server <- function(input, output) {
#Generate a plot
output$mpgPlot <- renderPlot({
plot(as.formula(paste("mpg ~", input$variable)),data = mtcars,pch = 19,col = "darkred",main = paste("mpg ~", input$variable))
})
}
server
?plotOutput
?rmarkdown
?knitr
